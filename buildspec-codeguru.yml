version: 0.2
env:
  variables:
    POLL_MAX: "20"
    POLL_SLEEP: "15"

phases:
  install:
    runtime-versions:
      python: 3.9
    commands:
      - "echo '=== CodeGuru Reviewer stage (existing association) ==='"
      - "yum install -y jq >/dev/null 2>&1 || true"
      - "aws --version"
      - 'echo "Region=${AWS_DEFAULT_REGION}  BRANCH=${BRANCH}"'
      - 'test -n "${CODEGURU_ASSOCIATION_ARN}" || { echo "ERROR: CODEGURU_ASSOCIATION_ARN is empty"; exit 1; }'
      - 'test -n "${BRANCH}" || { echo "ERROR: BRANCH is empty"; exit 1; }'

  build:
    commands:
      # Instead of describe (which hard-fails), list and confirm the ARN exists in this region
      - >
        aws codeguru-reviewer list-repository-associations
        --region "${AWS_DEFAULT_REGION}"
        --output json > assoc-list.json
      - 'echo "Associations in region:"; jq -r ".RepositoryAssociationSummaries[].AssociationArn" assoc-list.json || true'
      - |
        if ! jq -e --arg arn "${CODEGURU_ASSOCIATION_ARN}" \
             '.RepositoryAssociationSummaries[]?|.AssociationArn==$arn' assoc-list.json >/dev/null; then
          echo "ERROR: The provided CODEGURU_ASSOCIATION_ARN is not found in region ${AWS_DEFAULT_REGION}."
          exit 1
        fi

      # Create review (safe JSON avoids quoting issues)
      - |
        cat > input.json <<EOF
        {
          "Name": "pipeline-review-$(date +%s)",
          "RepositoryAssociationArn": "${CODEGURU_ASSOCIATION_ARN}",
          "Type": { "RepositoryAnalysis": { "RepositoryHead": { "BranchName": "${BRANCH}" } } }
        }
        EOF
      - 'cat input.json'

      - >
        REVIEW_ARN=$(aws codeguru-reviewer create-code-review
        --cli-input-json file://input.json
        --region "${AWS_DEFAULT_REGION}"
        --query 'CodeReview.CodeReviewArn' --output text) || {
          echo "ERROR: create-code-review failed (check ARN/region/perms)"; exit 1; }
      - 'echo "Review ARN: ${REVIEW_ARN}"'

      - |
        for i in $(seq 1 ${POLL_MAX}); do
          STATUS=$(aws codeguru-reviewer describe-code-review \
            --code-review-arn "${REVIEW_ARN}" \
            --region "${AWS_DEFAULT_REGION}" \
            --query 'CodeReview.State' --output text 2>/dev/null || echo "Unknown")
          echo "Status: $STATUS (attempt $i/${POLL_MAX})"
          [ "$STATUS" = "Completed" ] && break
          if [ "$STATUS" = "Failed" ]; then
            echo "CodeGuru review FAILED"
            aws codeguru-reviewer describe-code-review \
              --code-review-arn "${REVIEW_ARN}" \
              --region "${AWS_DEFAULT_REGION}" \
              --output json || true
            exit 1
          fi
          sleep "${POLL_SLEEP}"
        done

      - >
        aws codeguru-reviewer describe-code-review
        --code-review-arn "${REVIEW_ARN}"
        --region "${AWS_DEFAULT_REGION}"
        --query 'CodeReview.Metrics' --output json > review-metrics.json || true
      - >
        aws codeguru-reviewer list-recommendations
        --code-review-arn "${REVIEW_ARN}"
        --region "${AWS_DEFAULT_REGION}"
        --output json > review-output.json || true
      - "echo '=== Metrics ==='; cat review-metrics.json || true"
      - "echo '=== Recommendations ==='; cat review-output.json || true"

artifacts:
  files:
    - assoc-list.json
    - input.json
    - review-metrics.json
    - review-output.json
