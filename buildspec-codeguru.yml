version: 0.2

env:
  variables:
    # You set these in the CodeBuild project (or in the CodePipeline action env):
    # CODEGURU_ASSOCIATION_ARN = arn:aws:codeguru-reviewer:<region>:<acct>:association/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
    # BRANCH = main
    POLL_MAX: "20"
    POLL_SLEEP: "15"

phases:
  install:
    runtime-versions:
      python: 3.9
    commands:
      - "echo '=== CodeGuru Reviewer stage (existing association) ==='"
      - "yum install -y jq >/dev/null 2>&1 || true"
      - "aws --version"
      - "echo Region=${AWS_DEFAULT_REGION} BRANCH=${BRANCH}"
      - 'test -n "${CODEGURU_ASSOCIATION_ARN}" || { echo "ERROR: CODEGURU_ASSOCIATION_ARN is empty"; exit 1; }'
      - 'test -n "${BRANCH}" || { echo "ERROR: BRANCH is empty"; exit 1; }'

  build:
    commands:
      # 1) Sanity-check the association ARN in this region
      - >
        aws codeguru-reviewer describe-repository-association
        --association-arn "${CODEGURU_ASSOCIATION_ARN}"
        --region "${AWS_DEFAULT_REGION}"
        --output json > assoc.json
      - "echo 'Association OK:'; jq '.Association' assoc.json || true"

      # 2) Build safe JSON for create-code-review (avoids quoting issues)
      - |
        cat > input.json <<EOF
        {
          "Name": "pipeline-review-$(date +%s)",
          "RepositoryAssociationArn": "${CODEGURU_ASSOCIATION_ARN}",
          "Type": {
            "RepositoryAnalysis": {
              "RepositoryHead": { "BranchName": "${BRANCH}" }
            }
          }
        }
        EOF
      - "cat input.json"

      #3) Create the CodeGuru review and capture its ARN
      - >
        REVIEW_ARN=$(aws codeguru-reviewer create-code-review
        --cli-input-json file://input.json
        --region "${AWS_DEFAULT_REGION}"
        --query 'CodeReview.CodeReviewArn' --output text) || {
          echo "ERROR: create-code-review failed (check ARN/region/permissions).";
          exit 1;
        }
      - 'echo "Review ARN: ${REVIEW_ARN}"'

      # 4) Poll until Completed/Failed
      - |
        for i in $(seq 1 ${POLL_MAX}); do
          STATUS=$(aws codeguru-reviewer describe-code-review \
            --code-review-arn "${REVIEW_ARN}" \
            --region "${AWS_DEFAULT_REGION}" \
            --query 'CodeReview.State' --output text 2>/dev/null || echo "Unknown")
          echo "Status: $STATUS (attempt $i/${POLL_MAX})"
          [ "$STATUS" = "Completed" ] && break
          if [ "$STATUS" = "Failed" ]; then
            echo "CodeGuru review FAILED"
            aws codeguru-reviewer describe-code-review \
              --code-review-arn "${REVIEW_ARN}" \
              --region "${AWS_DEFAULT_REGION}" \
              --output json || true
            exit 1
          fi
          sleep "${POLL_SLEEP}"
        done

      # 5) Save metrics and recommendations
      - >
        aws codeguru-reviewer describe-code-review
        --code-review-arn "${REVIEW_ARN}"
        --region "${AWS_DEFAULT_REGION}"
        --query 'CodeReview.Metrics' --output json > review-metrics.json || true
      - >
        aws codeguru-reviewer list-recommendations
        --code-review-arn "${REVIEW_ARN}"
        --region "${AWS_DEFAULT_REGION}"
        --output json > review-output.json || true
      - "echo '=== Metrics ==='; cat review-metrics.json || true"
      - "echo '=== Recommendations ==='; cat review-output.json || true"

artifacts:
  files:
    - assoc.json
    - input.json
    - review-metrics.json
    - review-output.json
