name: terraform-ecr
on:
    workflow_call:
      inputs:
        action:
          type: string
          required: true
          default: apply        # plan | apply | destroy
        environment:
          type: string
          required: true
          default: dev
        aws_region:
          type: string
          required: false
          default: us-east-1
        ecr_namespace:
          type: string
          required: false
          default: online-boutique
        services_csv:
          type: string
          required: false
          default: "adservice,cartservice,checkoutservice,currencyservice,emailservice,frontend,loadgenerator,paymentservice,productcatalogservice,recommendationservice,shippingservice"
      secrets:
        AWS_GHA_ROLE_ARN:
          required: true

    workflow_dispatch:
      inputs:
        action:
          description: "terraform action"
          type: choice
          required: true
          default: plan
          options: [plan,apply,destroy]
        environment:
          description: "Target environment eg: dev, staging, prod"
          type: choice
          required: true
          default: dev
          options: [dev, staging, prod]
        aws_region:
          description: "AWS region"
          type: string
          required: false
          default: us-east-1
        ecr_namespace:
          description: "ECR namespace (prefix for all ECR repos)"
          type: string
          required: false
          default: online-boutique
        services_csv:
          description: "Comma-separated list of services to create ECR repos for"
          type: string
          required: false
          default: "adservice,cartservice,checkoutservice,currencyservice,emailservice,frontend,loadgenerator,paymentservice,productcatalogservice,recommendationservice,shippingservice"

permissions:
    contents: read
    id-token: write

env:
    AWS_REGION: us-east-1
    TF_WORKDIR: infra/ecr

jobs:
    terraform:
        runs-on: ubuntu-latest
        environment: ${{ inputs.environment }}

        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Configure AWS Credentials via OIDC
              uses: aws-actions/configure-aws-credentials@v4
              with:
                aws-region: ${{ env.AWS_REGION }}
                role-to-assume: ${{ secrets.AWS_GHA_ROLE_ARN }}   # IAM ROLE WITH GITHUB OIDC

            - name: Setup Terraform
              uses: hashicorp/setup-terraform@v3

            - name: Render services list for TF
              id: svc
              shell: bash
              run: |
                IFS=',' read -ra ITEMS <<< "${{ inputs.services_csv }}"
                LIST="["
                SEP=""
                for i in "${ITEMS[@]}"; do
                  i="$(echo "$i" | xargs)"
                  [ -z "$i" ] && continue
                  LIST="${LIST}${SEP}\"${i}\""
                  SEP=","
                done
                LIST="${LIST}]"
                echo "list=${LIST}" >> "$GITHUB_OUTPUT"
            - name: Terraform init
              working-directory: ${{ env.TF_WORKDIR }}
              run: terraform init -input=false

            - name: Terraform validate
              working-directory: ${{ env.TF_WORKDIR }}
              run: terraform validate

            - name: Terraform plan
              if: ${{ inputs.action == 'plan' }}
              working-directory: ${{ env.TF_WORKDIR }}
              run: |
                terraform plan -input=false \
                -var="aws_region=${{ inputs.aws_region }}" \
                -var="ecr_namespace=${{ inputs.ecr_namespace }}" \
                -var='services=${{ steps.svc.outputs.list }}'

            - name: Terraform apply
              if: ${{ inputs.action == 'apply' }}
              working-directory: ${{ env.TF_WORKDIR }}
              run: |
                terraform apply -input=false -auto-approve \
                -var="aws_region=${{ inputs.aws_region }}" \
                -var="ecr_namespace=${{ inputs.ecr_namespace }}" \
                -var='services=${{ steps.svc.outputs.list }}'

            - name: Terraform destroy
              if: ${{ inputs.action == 'destroy' }}
              working-directory: ${{ env.TF_WORKDIR }}
              run: |
                terraform destroy -auto-approve \
                -var="aws_region=${{ inputs.aws_region }}" \
                -var="ecr_namespace=${{ inputs.ecr_namespace }}" \
                -var='services=${{ steps.svc.outputs.list }}'