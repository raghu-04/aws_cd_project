name: Reusable_ci workflow
on:
    workflow_call:
        inputs:
            service:
                required: true
                type: string
            language:
                required: true
                type: string
            sonar_project_key:
                required: false
                type: string
            working_dir:
                required: false
                type: string
                default: src/${{ inputs.service }}
            
jobs:
    ci:
        name: CI for ${{ inputs.service }}
        runs-on: ubuntu-latest
        permissions:
          contents: read
          security-events: write
        
        env:
          RESOLVED_WORKDIR: ${{ inputs.working_dir != '' && inputs.working_dir || format('src/{0}', inputs.service) }}
        defaults:
            run:
                working-directory:  ${{ env.RESOLVED_WORKDIR }}

        steps:
            - name: Checkout code
              uses: actions/checkout@v5

            ######Language setup######
            
            ## - name: Check for package-lock.json ##
            ##  run: | ##
            ## if [ ! -f "${{ inputs.working_dir }}/package-lock.json" ]; then ##
            ##    echo "No package-lock.json found for ${{ inputs.service }}" ##
            ##  fi  ##

            - name: setup Node.js
              if: ${{ inputs.language == 'nodejs' }}
              uses: actions/setup-node@v5
              with:
                  node-version: '20'
                  cache: 'npm'
                  cache-dependency-path: ${{ env.RESOLVED_WORKDIR }}/package-lock.json
            - name: setup Python
              if: ${{ inputs.language=='python' }}
              uses: actions/setup-python@v5
              with:
                  python-version: '3.11'
                  cache: 'pip'

            - name: setup Go
              if: ${{ inputs.language=='go' }}
              uses: actions/setup-go@v5
              with:
                  go-version: '1.22'
                  cache: true
                  cache-dependency-path: ${{ env.RESOLVED_WORKDIR }}/go.sum
            
            - name: setup Java
              if: ${{ inputs.language=='java' }}
              uses: actions/setup-java@v5
              with:
                  distribution: 'temurin'
                  java-version: '21'
                  cache: ${{ hashFiles(format('{0}/gradlew', env.RESOLVED_WORKDIR)) != '' && 'gradle' || (hashFiles(format('{0}/mvnw', env.RESOLVED_WORKDIR)) != '' && 'maven' || '') }}

            - name: Setup .NET
              if: ${{ inputs.language == 'csharp' }}
              uses: actions/setup-dotnet@v4
              with:
                dotnet-version: '8.0.x'

            - name: Ensure gradlew is executable
              if: ${{ inputs.language == 'java' }}
              run: chmod +x ./gradlew
            
            ######Install dependencies######
            - name: Install dependencies and run tests
              run: |
                if [ -f package.json ]; then 
                    npm install; 
                    ##npm test; 
                fi
                                 # ----> Node.js
                if [ -f requirements.txt ]; then 
                    pip install -r requirements.txt; 
                    ###pytest;###s 
                fi
                                 # ----> Python
                if [ -f go.mod ]; then
                    go mod tidy
                    go test ./... -v;
                fi
                                 # ----> Go
                if [ -f gradlew ]; then
                  ./gradlew -q test
                elif ls **/*Test.java >/dev/null 2>&1 && [ -f mvnw ]; then
                  ./mvnw -q test
                fi
                                 # ----> Java (Gradel,Maven)

            
            - name: Restore and Test (.NET)
              if: ${{ inputs.language == 'csharp' }}
              run: |
                # Run .NET tests only if a solution or project exists
                if compgen -G "*.sln" > /dev/null; then
                  dotnet restore
                  dotnet test --verbosity normal
                elif compgen -G "**/*.csproj" > /dev/null; then
                  # Restore & test each project individually
                  while IFS= read -r -d '' proj; do
                    dotnet restore "$proj"
                    dotnet test "$proj" --verbosity normal
                  done < <(find . -name "*.csproj" -print0)
                else
                  echo "No .NET solution or project found; skipping .NET tests."
                fi
            
            ######SonarQube Analysis######
            - name: SonarQube Scan
              if: ${{ inputs.sonar_project_key != '' }}
              uses: SonarSource/sonarqube-scan-action@v6
              env:
                SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}   
                SONAR_HOST_URL: https://sonarcloud.io
              with:
                projectBaseDir: ${{ env.RESOLVED_WORKDIR }}
                args: >
                  -Dsonar.projectKey=${{ inputs.sonar_project_key }}
                  -Dsonar.organization=${{ vars.SONAR_ORGANIZATION }}
                  -Dsonar.qualitygate.wait=false

            ######TrivyFSScan######
            - name: Trivy FS Scan
              uses: aquasecurity/trivy-action@0.33.1
              with:
                scan-type: fs
                format: sarif
                ignore-unfixed: 'true'
                output: trivy-fs-${{ inputs.service }}.sarif
                severity: 'CRITICAL,HIGH'

            - name: Upload sarif file
              if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
              uses: github/codeql-action/upload-sarif@v3
              with:
                sarif_file: ${{ env.RESOLVED_WORKDIR }}/trivy-fs-${{ inputs.service }}.sarif