name: service-ci
on:
  workflow_call:
    inputs:
      service:
        required: true
        type: string
      language:
        required: true
        type: string
      sonar_project_key:
        required: false
        type: string
      working_dir:
        required: false
        type: string
        default: services/${{ inputs.service }}
        
jobs:
  ci:
    name: CI (${{ inputs.service }})
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    defaults:
      run:
        working-directory: ${{ inputs.working_dir }}

    steps: 
      - name: code_checkout
        uses: actions/checkout@v4

        ##setting up languages for 
        ## Node , python , Go , Java

      - name: setup Node
        if: ${{ inputs.language == 'node' }}
        uses: actions/setup-node@v4
        with: { node-version: '20' }

      - name: setup python
        if: ${{ inputs.language == 'python' }}
        uses: actions/setup-python@v5
        with: { python-version: '3.11' }

      - name: setup Go
        if: ${{ inputs.language == 'go' }}
        uses: actions/setup-go@v5
        with: { go-version: '1.22' }

      - name: setup java
        if: ${{ inputs.language == 'java' }}
        uses: actions/setup-java@v4
        with: 
          distribution: temurin
          java-version: '21'

        #installing dependencies and running tests

      - name: installing dependencies and testing
        run: |
          if [ -f package.json ]; then npm ci && npm test; fi
          if [ -f requirements.txt ]; then pip3 install -r requirements.txt && pytest -q; fi
          if [ -f go.mod ]; then go test ./... -v; fi
          if ls **/*Test.java >/dev/null 2>&1; then ./mvnw -q test; fi

      ################
      #static analysis (SonarQube)
      ################
      
      - name: SonarQube Scan
        if: ${{ inputs.sonar_project_key != '' }}
        uses: SonarSource/sonarqube-scan-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          projectBaseDir: ${{ inputs.working_dir }}
          args: >
            -Dsonar.projectKey=${{ inputs.sonar_project_key }}
            -Dsonar.qualitygate.wait=true

      ###############
      #TRIVY FILE SYSTEMS SCAN
      ###############

      - name: Trivy FS SCAN
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: fs
          ignore-unfixed: true
          format: sarif
          output: trivy-fs-${{ inputs.service }}.sarif
          severity: CRITICAL,HIGH

      - name: Upload SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-fs-${{ inputs.service }}.sarif
